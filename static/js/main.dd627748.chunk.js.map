{"version":3,"sources":["libraryContext.js","components/library.js","components/newBook.js","App.js","reportWebVitals.js","index.js"],"names":["LibraryContext","createContext","header","Library","useContext","myLibrary","setEditBook","useState","selectedRowId","setSelectedRowId","useEffect","prevState","bookIndex","bookState","title","author","isRead","isOwned","className","map","label","i","book","onDoubleClick","e","trOnDoubleClick","NewBookForm","setMyLibrary","editBook","newBook","setNewBook","document","querySelectorAll","forEach","selectNode","selectedIndex","read","own","arguments","setSelectNodes","inputOnChange","target","name","value","selectOnChange","onSubmit","preventDefault","books","htmlFor","type","id","placeholder","onChange","required","defaultValue","lettersFromAStoic","theOdyssey","thePrince","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dd627748.chunk.js","sourcesContent":["import { createContext } from 'react';\n\n\n// const lettersFromAStoic = {\n//   title:'Letters from a Stoic',\n//   author: 'Seneca',\n//   isRead: true,\n//   isOwned: true,\n// };\n// const theOdyssey = {\n//   title:'The Odyssey',\n//   author: 'Homer',\n//   isRead: false,\n//   isOwned: true,\n// };\n// const thePrince = {\n//   title: 'The Prince',\n//   author: 'Niccolo Machiavelli',\n//   isRead: true,\n//   isOwned: true,\n// };\n\n\nexport const LibraryContext = createContext();","import React, { useState, useEffect, useContext } from 'react';\nimport { LibraryContext } from '../libraryContext';\nimport 'bulma/css/bulma.min.css';\nimport '../App.css'\n\nconst header = ['Title', 'Author', 'Progress', 'Status'];\n\nconst Library = () => {\n    const { myLibrary, setEditBook } = useContext(LibraryContext);\n\n    // state storing selected row ID used for <tr> className to highlight selected row\n    const [selectedRowId, setSelectedRowId] = useState(() => null);\n\n\n    useEffect(() => {\n        // reset editBook state to default on myLibrary re-render to allow newBook form to reset after editing a book in myLibrary\n        setEditBook(prevState => {\n            return {                \n                bookIndex: -1,\n                bookState: {                    \n                    title: \"\",\n                    author: \"\",\n                    isRead: false,\n                    isOwned: false\n                }\n            };\n        });\n        // reset selectedRowId to remove highlight of selected row after edit\n        setSelectedRowId(prevState => null);\n    }, [myLibrary, setEditBook]);\n\n\n    const trOnDoubleClick = (e, i) => {\n        // e refers to event and i the index given during mapping, used by <tr>\n        setSelectedRowId(prevState => i);\n        setEditBook(prevState => {\n            return {\n                bookIndex: i,\n                bookState: {...myLibrary[i]}\n            };\n        });\n    };\n\n\n\n    return (\n        <>\n            <table className=\"table is-fullwidth is-hoverable\">\n                <thead>\n                    <tr>\n                        {header.map((label, i) => <th className=\"desktop\" key={i}>{label}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {myLibrary.map((book, i) => {\n                        return (\n                            // className is changed if selectedRowId is changed to i, i is passed in together with event (e) onDoubleClick\n                            <tr className={selectedRowId === i ? \"is-selected\" : null} key={i} onDoubleClick={(e) => trOnDoubleClick(e, i)}>\n                                <td className=\"mobile-flex\" data-header={header[0]}>{book.title}</td>\n                                <td className=\"mobile-flex\" data-header={header[1]}>{book.author}</td>\n                                <td className=\"mobile-flex\" data-header={header[2]}>{book.isRead ? 'Read' : 'Unread'}</td>\n                                <td className=\"mobile-flex\" data-header={header[3]}>{book.isOwned ? 'Acquired' : 'Lacking'}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </>\n    );\n}\n\n\nexport default Library;","import React, { useState, useContext, useEffect } from 'react';\nimport { LibraryContext } from '../libraryContext';\nimport 'bulma/css/bulma.min.css';\nimport '../App.css'\n\n\nconst NewBookForm = () => {\n    const { myLibrary, setMyLibrary, editBook } = useContext(LibraryContext);\n\n\n    const [newBook, setNewBook] = useState(() => ({\n        title: '',\n        author: '',\n        isRead: false,\n        isOwned: false\n    }));\n\n\n    useEffect(() => {\n        // reset form on successful submit of newBook to myLibrary and on first render\n        if (editBook.bookIndex < 0) {\n            setNewBook(prevState => {\n                return {\n                    title: '',\n                    author: '',\n                    isRead: false,\n                    isOwned: false\n                };\n            });\n            // initialize all <select> nodes to none/null option selected\n            document.querySelectorAll('select').forEach(selectNode => selectNode.selectedIndex = \"-1\");\n        } else {\n            // fill newBook form with editBook state to edit existing book\n            setNewBook(prevState => editBook.bookState);\n            setSelectNodes(editBook.bookState.isRead, editBook.bookState.isOwned);\n        }\n    }, [myLibrary, editBook]);\n\n\n    const handleSubmit = (e) => {\n        // used by form to either create new book or edit existing and preventing default form submit\n        e.preventDefault();\n        if (editBook.bookIndex === -1) {\n            // create new book\n            setMyLibrary(prevState => [newBook, ...prevState]);\n        } else {\n            //edit existing book by creating shallow copy of myLibrary state and editing the book in the shallow copy\n            let books = [...myLibrary];\n            books[editBook.bookIndex] = {...newBook};\n            setMyLibrary(prevState => [...books]);\n        }\n    };\n\n\n    const inputOnChange = (e) => {\n        setNewBook(prevState => {\n            return {...prevState, [e.target.name]: e.target.value};\n        });\n    };\n\n    // handler used by <select> to convert \"true\" or \"false\" values to boolean since <select> only gives string values\n    const selectOnChange = (e) => {\n        setNewBook(prevState => {\n            return {...prevState, [e.target.name]: e.target.value === \"true\" ? true : false };\n        })\n    };\n\n    // set the values of select tags based on boolean values from isRead and isOwned, helper function used by useEffect\n    function setSelectNodes(read, own) {\n        document.querySelectorAll('select').forEach((selectNode, i) => selectNode.selectedIndex = arguments[i] ? \"0\" : \"1\")\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"columns\">\n                <div className=\"column is-4\">\n                    <div className=\"field\">\n                        <label className=\"label\" htmlFor=\"inputTitle\">Title</label>\n                        <div className=\"control\">\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                id=\"inputTitle\"\n                                placeholder=\"Book\"\n                                name=\"title\"\n                                value={newBook.title}\n                                onChange={inputOnChange}\n                                required\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column is-4\">\n                    <div className=\"field\">\n                        <label className=\"label\" htmlFor=\"inputAuthor\">Author</label>\n                        <div className=\"control\">\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                id=\"inputAuthor\"\n                                placeholder=\"Name\"\n                                name=\"author\"\n                                value={newBook.author}\n                                onChange={inputOnChange}\n                                required\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column\">\n                    <div className=\"field\">\n                        <label className=\"label\" htmlFor=\"selectProgress\">Progress</label>\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select id=\"selectProgress\" defaultValue={null}  name=\"isRead\" onChange={selectOnChange} required>\n                                    <option value={true}>Read</option>\n                                    <option value={false}>Unread</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column\">\n                    <div className=\"field\">\n                        <label className=\"label\" htmlFor=\"selectStatus\">Status</label>\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select id=\"selectStatus\" defaultValue={null} name=\"isOwned\" onChange={selectOnChange} required>\n                                    <option value={true}>Acquired</option>\n                                    <option value={false}>Lacking</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"mobile-flex-button\">\n                <input className=\"button is-link is-outlined is-inverted\" type=\"submit\" />\n            </div>\n        </form>\n    )\n}\n\nexport default NewBookForm;","import React, { useState } from 'react';\nimport Library from './components/library.js';\nimport NewBookForm from './components/newBook.js';\nimport { LibraryContext } from './libraryContext.js';\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\n\nconst lettersFromAStoic = {\n  title:'Letters from a Stoic',\n  author: 'Seneca',\n  isRead: true,\n  isOwned: true,\n};\nconst theOdyssey = {\n  title:'The Odyssey',\n  author: 'Homer',\n  isRead: false,\n  isOwned: true,\n};\nconst thePrince = {\n  title: 'The Prince',\n  author: 'Niccolo Machiavelli',\n  isRead: true,\n  isOwned: true,\n};\n\nfunction App() {\n  const [myLibrary, setMyLibrary] = useState(() => [lettersFromAStoic, theOdyssey, thePrince]);\n\n  const [editBook, setEditBook] = useState(() => ({\n    bookIndex: -1,\n    bookState: {      \n      title: \"\",\n      author: \"\",\n      isRead: false,\n      isOwned: false\n    }\n  }))\n\n\n  return (\n    <>\n      <header className=\"hero\">\n        <div className=\"container has-text-centered\">\n          <h1 className=\"title is-1 has-text-primary\">Odin Book Library</h1>\n          <p className=\"subtitle is-2\">A library of my book collection</p>\n        </div>\n      </header>\n      <main className=\"section\">\n        <div className=\"container\">\n          <div className=\"box has-background-info\">\n            <LibraryContext.Provider value={{ myLibrary, setEditBook }}>\n              <Library />\n            </LibraryContext.Provider>\n          </div>\n        </div>\n      </main>\n      <div className=\"section\">\n        <div className=\"container\">\n          <span className=\"is-size-5\">Add/Edit Book (double click row to edit)</span>\n          <div className=\"box has-background-info\">\n            <LibraryContext.Provider value={{ myLibrary, setMyLibrary, editBook }}>\n              <NewBookForm />\n            </LibraryContext.Provider>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  // document.querySelector('body')\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}